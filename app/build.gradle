buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}
android {

    compileSdkVersion 23
    buildToolsVersion "23.0.1"
    lintOptions {
        disable 'ResourceCycle'
        abortOnError false
    }
    defaultConfig {
        minSdkVersion 16
        multiDexEnabled true
        targetSdkVersion 22
        versionCode 44
        versionName '5.5'
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    sourceSets {

        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src/main/java']

            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }
        donate {
            manifest.srcFile 'src/donate/AndroidManifest.xml'
            java.srcDirs = ['src/donate/java']
            res.srcDirs = ['src/donate/res']
        }
        free {
            manifest.srcFile 'src/free/AndroidManifest.xml'
            java.srcDirs = ['src/free/java']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    final Console console = System.console();
    if (console != null) {
        signingConfigs {
            productionConfig {
                storeFile file("openmickeystore")
                storePassword new String(System.console().readPassword("\n\$ Enter keystore password: "))
                keyAlias "openmic"
                keyPassword new String(System.console().readPassword("\n\$ Enter key password: "))
            }
        }
    } else {

        // Building from IDE's "Run" button
        signingConfigs {
            productionConfig {

            }
        }

    }

    buildTypes {
        debug {
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.productionConfig
            proguardFile 'proguard-android.txt'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def file = output.outputFile

                    output.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.getVersionName() + ".apk"))
                }
            }
        }


    }
    flavorDimensions "version", "option"
    productFlavors {
        free {
            flavorDimension "version"
            applicationId "com.RSen.OpenMic.Pheonix"
            buildConfigField "boolean", "DONATE", "false"
            buildConfigField "boolean", "googlespeech", "false"
            buildConfigField "boolean", "mobiroo", "false"
        }
        donate {
            flavorDimension "version"
            applicationId "com.RSen.OpenMic.Pheonix.Donate"
            buildConfigField "boolean", "DONATE", "true"
            buildConfigField "boolean", "googlespeech", "false"
            buildConfigField "boolean", "mobiroo", "false"

        }
        mobiroo {
            flavorDimension "version"
            applicationId "com.mobiroo.n.RSen.OpenMic"
            buildConfigField "boolean", "DONATE", "true"
            buildConfigField "boolean", "googlespeech", "true"
            buildConfigField "boolean", "mobiroo", "true"

        }
        googlespeech {
            flavorDimension "option"
            buildConfigField "boolean", "googlespeech", "true"

        }
        nogooglespeech {
            flavorDimension "option"
            buildConfigField "boolean", "googlespeech", "false"
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}
dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(":Donations")
    compile 'com.apptentive:apptentive-android:2.0.1@aar'
    compile 'com.google.android.gms:play-services:+'
    compile 'com.android.support:support-v4:+'
    compile 'com.github.gabrielemariotti.cards:library:1.7.3'
    compile 'com.github.gabrielemariotti.cards:library-extra:1.7.3'
    compile 'com.android.support:support-v4:23.0.1'
    compile 'com.android.support:appcompat-v7:23.0.1'
    compile 'com.android.support:cardview-v7:23.0.1'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    freeCompile('com.github.androidsocialnetworks:library:0.3.7@aar') {
        transitive = true
    }
    compile 'com.github.johnpersano:supertoasts:1.3.4@aar'
    compile('com.crashlytics.sdk.android:crashlytics:2.5.2@aar') {
        transitive = true;
    }

}